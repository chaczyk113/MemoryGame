{"version":3,"sources":["components/Buttons/LinkBtn.js","components/Header/Header.js","components/Menu/ButtonGroup/ButtonGroup.js","components/Menu/LvlScore/LvlScore.js","components/Buttons/ActionBtn.js","components/Menu/Menu.js","components/Game/Card/Card.js","components/Game/Game.js","components/Game/Placeholder/Placeholder.js","components/Game/Popup/Popup.js","components/Game/WinPopup/WinPopup.js","components/Footer/Footer.js","containers/App.js","serviceWorker.js","index.js"],"names":["linkBtn","props","react_default","a","createElement","className","href","address","children","header","LinkBtn","buttonGroup","classText","scoreList","lvlScroe","_ref","gameScore","last","top","actionBtn","pressedClass","gameStarted","gameLvl","level","disabled","locked","onClick","e","click","title","style","fontSize","description","menu","lvlButtonClick","gameProgress","buttonsArray","des","lvl","text","map","button","index","ActionBtn","key","headerText","Fragment","id","ButtonGroup_ButtonGroup","LvlScore_LvlScore","card","size","isReversed","cardIcon","cardColor","cardClick","containerStyle","width","height","cardStyle","backgroundColor","iconStyle","cardClasses","config","reverseIcon","game","gridStyle","gridTemplateColumns","repeat","lvlSize","x","cardsGird","cardsObj","cardData","Card_Card","cardSize","icon","concat","gamePlaceholder","winPopup","WinPopup","clickCounter","isNewRecord","replayClick","nextLvlClick","cancelClick","footer","App","state","isNewGame","reversedCards","matchedCouples","isWin","gameAreaWidth","gameAreaStyle","buttonLocker","cardColors","randomIcons","lvlRangeSize","newCardsObj","cardsIds","iconsList","Object","toConsumableArray","icons","i","push","length","iconId","Math","floor","random","splice","endGameHandler","score","console","log","_this","setState","Storage","localStorage","setItem","JSON","stringify","cardClickHandler","modifiedCardObj","isFailure","lvlRange","setTimeout","reverseAllCards","startNewGame","replyClickHandler","cancelClickHandler","parseInt","reverseTime","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","lvlButtonClickHanlder","window","innerHeight","innerWidth","this","savedProgress","getItem","savedGameScore","parse","_this2","gameContent","gameInfo","Game_Game","Popup_Popup","Game_WinPopup_WinPopup","Placeholder_Placeholder","Header_Header","Menu_Menu","Footer_Footer","Component","Boolean","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa173a2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Buttons.scss'\r\n\r\nconst linkBtn = (props) => {\r\n    return (\r\n        <div className=\"Button\"><a href={props.address}><div className=\"header-btn\">{props.children}</div></a></div>\r\n    )\r\n}\r\n\r\nexport default linkBtn","import React from 'react';\r\nimport './Header.scss';\r\nimport LinkBtn from '../Buttons/LinkBtn';\r\n\r\nconst header = () => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <h1>Memory game</h1>\r\n            <h2>with Font Awesome</h2>\r\n            <LinkBtn address='#Menu'><i className=\"far fa-play-circle\"></i> Start fun!</LinkBtn>\r\n            <div className=\"scale\"><a className=\"link\" href=\"https://fontawesome.com\">Learn more</a></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default header","import React from 'react';\r\nimport './ButtonGroup.scss'\r\n\r\nconst buttonGroup = (props) => {\r\n    let classText = \"ButtonGroup\";\r\n    if (props.scoreList) {\r\n        classText+=\" scoreList\";\r\n    }\r\n\r\n    return (\r\n        <div className={classText}>\r\n            <h3>{props.header}</h3>\r\n            <div className=\"Buttons-row\">{props.children}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default buttonGroup","import React from 'react';\r\nimport './LvlScore.scss'\r\n\r\nconst lvlScroe = ({ gameScore }) => {\r\n\r\n    return (\r\n        <div className=\"LvlScore\">\r\n            <p>Last: </p><p><b>{gameScore.last}</b></p>\r\n            <p>Top: </p><p><b>{gameScore.top}</b></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default lvlScroe;","import React from 'react';\r\nimport './Buttons.scss'\r\n\r\nconst actionBtn = (props) => {\r\n\r\n    let outputText = () => {\r\n        if (!props.locked) {\r\n            return (\r\n                <div className=\"ScrollableContent\">\r\n                    <span>{props.children}</span>\r\n                    <span style={{ fontSize: \"16px\" }}>{props.description}</span>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"Locked\">\r\n                    <i className=\"fas fa-lock\"></i>\r\n                </div>\r\n            )\r\n        }\r\n    };\r\n\r\n    let pressedClass = '';\r\n    if (props.gameStarted && props.gameLvl === props.level) {\r\n        pressedClass = \"buttonPressed\";\r\n    }\r\n\r\n    return (\r\n        <button className={\"ActionButton \" + pressedClass} disabled={props.locked} onClick={(e) => { props.click(props.level, e)}} title={props.title}>\r\n            <a href={\"#Game\"}>{outputText()}</a>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default actionBtn;\r\n","import React from 'react';\r\nimport './Menu.scss'\r\nimport ButtonGroup from './ButtonGroup/ButtonGroup';\r\nimport LvlScore from './LvlScore/LvlScore';\r\nimport ActionButton from '../Buttons/ActionBtn';\r\n\r\nconst menu = ({ lvlButtonClick, gameScore, gameProgress, gameLvl, gameStarted }) => {\r\n\r\n    const buttonsData = [{ des: \"Easy\", lvl: 0, text: \"1\" }, { des: \"Medium\", lvl: 1, text: \"2\" }, { des: \"Hard\", lvl: 2, text: \"3\" }, { des: \"Nightmare\", lvl: 3, text: <i className=\"far fa-dizzy\"></i> }];\r\n    const buttonsArray = buttonsData.map((button, index) => {\r\n        return (\r\n            <ActionButton\r\n                key={index}\r\n                description={button.des}\r\n                click={lvlButtonClick}\r\n                gameLvl={gameLvl}\r\n                gameStarted={gameStarted}\r\n                level={button.lvl}\r\n                locked={button.lvl <= gameProgress ? false : true}>\r\n                {button.text}\r\n            </ActionButton>\r\n        )\r\n    })\r\n    let headerText = <>Your score (clicks)</>\r\n    if (gameLvl === 3) {\r\n        headerText = <>Your score (matches)</>\r\n    }\r\n\r\n    return (\r\n        <div id=\"Menu\" className=\"Menu\">\r\n            <div className=\"wrapper\">\r\n                <ButtonGroup header=\"Choose level\">\r\n                    {buttonsArray}\r\n                </ButtonGroup >\r\n                <ButtonGroup header={headerText} scoreList={true}>\r\n                    <LvlScore gameLvl={gameLvl} gameScore={gameScore} />\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default menu","import React from 'react';\r\nimport './Card.scss'\r\nimport config from '../../../config/config.json'\r\n\r\nconst card = ({ size, isReversed, cardIcon, cardColor, id, cardClick }) => {\r\n\r\n    const containerStyle = {\r\n        width: size,\r\n        height: size,\r\n    };\r\n    const cardStyle = {\r\n        backgroundColor: cardColor\r\n    };\r\n\r\n    const iconStyle = {\r\n        fontSize: 0.55 * size\r\n    };\r\n\r\n    let cardClasses = \"Card\";\r\n    if (isReversed) {\r\n        cardClasses += \" flipped\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"cardContainer\" style={containerStyle} onClick={(e) => cardClick(id, e)}>\r\n            <div className={cardClasses}>\r\n                <div className=\"front\" style={cardStyle}><i className={\"fas fa-\" + cardIcon} style={iconStyle}></i></div>\r\n                <div className=\"back\" style={cardStyle}><i className={\"fas fa-\" + config.reverseIcon} style={iconStyle}></i></div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default card","import React from 'react';\r\nimport './Game.scss'\r\nimport Card from \"./Card/Card\";\r\n\r\n\r\nconst game = (props) => {\r\n\r\n    const gridStyle = {\r\n        gridTemplateColumns: 'auto '.repeat(props.lvlSize.x),\r\n    }\r\n\r\n    const cardsGird = props.cardsObj.map((cardData, index) => {\r\n        return <Card size={props.cardSize} isReversed={cardData.isReversed} cardIcon={cardData.icon} cardColor={props.cardColor} key={`${props.lvl}-${index}`} id={index} cardClick={props.cardClick} />\r\n    });\r\n\r\n    return (\r\n        <div id=\"Game\" className=\"Game\">\r\n            <div className=\"wrapper\" style={gridStyle}>\r\n                {cardsGird}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default game","import React from 'react';\r\nimport './Placeholder.scss';\r\n\r\n\r\nconst gamePlaceholder = () => {\r\n\r\n    return (\r\n        <div id=\"Game\" className=\"GamePlaceholder\" >\r\n            <p className=\"main\">Choose level to start a game!</p>\r\n            <p>Win a given level to unlock the next one.</p>\r\n            <p>Pass three levels to unlock <b>Nigthmare</b> mode, <br /> where mistakes are not allowed.</p>\r\n            <p>Good luck, have fun! <i className=\"far fa-smile-wink\"></i></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default gamePlaceholder","import React from 'react';\r\nimport './Popup.scss'\r\n\r\n\r\nconst winPopup = (props) => {\r\n\r\n    return (\r\n        <div className=\"Popup\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default winPopup","import React from 'react'\r\nimport ActionButton from '../../Buttons/ActionBtn';\r\n\r\nconst WinPopup = (props) => {\r\n    return (\r\n        <>\r\n            <div className=\"WinPopup\">\r\n                <p>Winner!</p>\r\n                <p>{`Score: ${props.clickCounter} clicks`}</p>\r\n                {props.isNewRecord ? <p><strong>New Record!</strong></p> : null\r\n                }\r\n            </div>\r\n            <div className=\"winButtons\">\r\n                <ActionButton\r\n                    description=\"Reply\"\r\n                    click={props.replayClick}\r\n                    level=\"0\">\r\n                    <i className=\"fas fa-undo-alt\"></i>\r\n                </ActionButton>\r\n                {/* don't show next level button when it's last level */}\r\n                {props.lvl < 3 ? (\r\n                    <ActionButton\r\n                        description=\"Next level\"\r\n                        click={props.nextLvlClick}\r\n                        level={props.lvl + 1}>\r\n                        <i className=\"fas fa-arrow-right\"></i>\r\n                    </ActionButton>\r\n                ) : null}\r\n                <ActionButton\r\n                    description=\"Cancel\"\r\n                    click={props.cancelClick}\r\n                    level=\"0\">\r\n                    <i className=\"fas fa-times\"></i>\r\n                </ActionButton>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WinPopup\r\n","import React from 'react';\r\nimport './Footer.scss'\r\n\r\nconst footer = (props) => {\r\n\r\n    return (\r\n        <div className=\"Footer\">\r\n            <p>React practice game project, by JZ.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default footer","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Header from '../components/Header/Header';\r\nimport Menu from '../components/Menu/Menu';\r\nimport Game from '../components/Game/Game';\r\nimport GamePlaceholder from '../components/Game/Placeholder/Placeholder';\r\nimport Popup from \"../components/Game/Popup/Popup\";\r\nimport WinPopup from \"../components/Game/WinPopup/WinPopup\";\r\nimport Footer from '../components/Footer/Footer';\r\n\r\nimport config from '../config/config.json'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    gameStarted: false,\r\n    cardsObj: [],\r\n    lvl: 0,\r\n    isNewGame: false,\r\n    reversedCards: [],\r\n    matchedCouples: 0,\r\n    isWin: false,\r\n    isNewRecord: false,\r\n    clickCounter: 0,\r\n    gameAreaWidth: 0,\r\n    gameAreaStyle: {},\r\n    gameScore: [{ last: 0, top: 0 }, { last: 0, top: 0 }, { last: 0, top: 0 }, { last: 0, top: 0 }],\r\n    gameProgress: 0\r\n  }\r\n\r\n  buttonLocker = false;\r\n\r\n  cardColor = config.cardColors[0];\r\n  cardSize = 200; //random value\r\n\r\n\r\n  randomIcons = (lvlRangeSize) => {\r\n    let newCardsObj = []; //Object with whole lvl cards data\r\n    let cardsIds = []; //Array of indexes for cards in game\r\n    let iconsList = [...config.icons]; //Copy of default icons set\r\n\r\n    for (let i = 0; i < (lvlRangeSize); i++) {\r\n      cardsIds.push(i); // creates array of indexes for set game range\r\n      newCardsObj.push(i); // creates a placeholder of cards data\r\n    }\r\n    let index;\r\n    while (cardsIds.length > 0) {\r\n      const iconId = Math.floor(Math.random() * iconsList.length);\r\n      const icon = iconsList.splice(iconId, 1)[0];\r\n\r\n      index = cardsIds.splice(Math.floor(Math.random() * cardsIds.length), 1)[0];\r\n      // select index for 1st card of couple with same icon and removes it from list\r\n      newCardsObj[index] = {\r\n        icon: icon,\r\n        isReversed: false,\r\n      };\r\n\r\n      index = cardsIds.splice(Math.floor(Math.random() * cardsIds.length), 1);\r\n      // select index for 2nd card of couple with same icon and removes it from list\r\n      newCardsObj[index] = {\r\n        icon: icon,\r\n        isReversed: false,\r\n      };\r\n\r\n    }\r\n    return newCardsObj;\r\n  }\r\n\r\n  endGameHandler = (score) => {\r\n    console.log(\"engGame\")\r\n    let gameScore = [...this.state.gameScore];\r\n    let gameProgress = this.state.gameProgress;\r\n    let isNewRecord = false;\r\n    gameScore[this.state.lvl].last = score\r\n    // new Record\r\n    if (this.state.lvl < 3 && gameScore[this.state.lvl].top > 0 && score < gameScore[this.state.lvl].top) {\r\n      gameScore[this.state.lvl].top = score;\r\n      isNewRecord = true;\r\n    }\r\n    else if (gameScore[this.state.lvl].top === 0) {\r\n      gameScore[this.state.lvl].top = score;\r\n      isNewRecord = true;\r\n    }\r\n    else if (this.state.lvl === 3 && gameScore[this.state.lvl].top > 0 && score > gameScore[this.state.lvl].top) {\r\n      gameScore[this.state.lvl].top = score;\r\n      isNewRecord = true;\r\n    }\r\n    // progress made\r\n    if (gameProgress < 4 && this.state.lvl === gameProgress) {\r\n      gameProgress++;\r\n    }\r\n    // save progress\r\n    this.setState({ gameScore: gameScore, gameProgress: gameProgress, isNewRecord: isNewRecord })\r\n    if (typeof (Storage) !== \"undefined\") {\r\n      localStorage.setItem('gameScore', JSON.stringify(this.state.gameScore));\r\n      localStorage.setItem('gameProgress', gameProgress);\r\n    }\r\n  }\r\n\r\n  cardClickHandler = (index) => {\r\n\r\n    if (!this.buttonLocker && this.state.cardsObj[index].isReversed) {\r\n      this.buttonLocker = true;\r\n\r\n      let reversedCards = [...this.state.reversedCards];\r\n      let modifiedCardObj = [...this.state.cardsObj];\r\n      let matchedCouples = this.state.matchedCouples;\r\n      let isWin = this.state.isWin;\r\n      let clickCounter = this.state.clickCounter;\r\n      let isFailure = false;\r\n      modifiedCardObj[index].isReversed = false;\r\n      clickCounter++;\r\n\r\n      if (reversedCards.length === 0) {\r\n        reversedCards[0] = index;\r\n      }\r\n      else {\r\n        reversedCards[1] = index;\r\n        // checks if there is a match\r\n        if (modifiedCardObj[index].icon === modifiedCardObj[reversedCards[0]].icon) {\r\n          reversedCards = [];\r\n          matchedCouples++;\r\n          // Checks if we won the game!\r\n          if (matchedCouples === config.lvlRange[this.state.lvl].size / 2) {\r\n            isWin = true;\r\n            this.endGameHandler(clickCounter);\r\n          }\r\n        }\r\n        // in case of fail\r\n        else {\r\n          // if not nightmare\r\n          if (this.state.lvl !== 3) {\r\n\r\n            setTimeout(() => {\r\n              modifiedCardObj[reversedCards[0]].isReversed = true;\r\n              modifiedCardObj[reversedCards[1]].isReversed = true;\r\n              reversedCards = [];\r\n              this.setState({ cardsObj: modifiedCardObj, reversedCards: reversedCards })\r\n              this.buttonLocker = false;\r\n            }, 600);\r\n          }\r\n          else {\r\n            this.endGameHandler(matchedCouples);\r\n            isFailure = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      this.setState({ cardsObj: modifiedCardObj, reversedCards: reversedCards, isNewGame: false, matchedCouples: matchedCouples, isWin: isWin, clickCounter: clickCounter }, () => {\r\n        // when failder in nightmare mode\r\n        if (isFailure) {\r\n          setTimeout(() => {\r\n            this.reverseAllCards();\r\n            setTimeout(() => {\r\n              this.startNewGame(this.state.lvl);\r\n              this.buttonLocker = false;\r\n            }, 600);\r\n          }, 600);\r\n        }\r\n        else if (reversedCards.length < 2) {\r\n          this.buttonLocker = false;\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  replyClickHandler = () => {\r\n    this.startNewGame(this.state.lvl);\r\n  }\r\n\r\n  cancelClickHandler = () => {\r\n    this.setState({ gameStarted: false, isWin: false });\r\n  }\r\n\r\n  startNewGame = (lvl) => {\r\n    let lvlRangeSize = config.lvlRange[lvl].size;\r\n    const newCardsObj = this.randomIcons(lvlRangeSize);\r\n    this.cardColor = config.cardColors[Math.floor(Math.random() * config.cardColors.length)];\r\n    this.cardSize = (this.state.gameAreaWidth - 10 * (parseInt(config.lvlRange[lvl].x) - 1)) / parseInt(config.lvlRange[lvl].x);\r\n    this.setState({\r\n      gameStarted: true,\r\n      cardsObj: newCardsObj,\r\n      lvl: lvl,\r\n      isNewGame: true,\r\n      isWin: false,\r\n      clickCounter: 0,\r\n      matchedCouples: 0,\r\n      reversedCards: []\r\n    }, () => {\r\n      setTimeout(() => {\r\n        this.reverseAllCards();\r\n      }, config.reverseTime[lvl])\r\n    });\r\n  }\r\n\r\n  reverseAllCards = () => {\r\n    let modifiedCardObj = [...this.state.cardsObj];\r\n    for (const cardObj of modifiedCardObj) {\r\n      cardObj.isReversed = true;\r\n    }\r\n    this.setState({ cardsObj: modifiedCardObj, isNewGame: false });\r\n  }\r\n\r\n  lvlButtonClickHanlder = (lvl) => {\r\n    if (!this.state.gameStarted || lvl !== this.state.lvl) {\r\n      this.startNewGame(lvl);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let height = window.innerHeight - 150 - 32;\r\n    let width = height * 1.66;\r\n\r\n    if (window.innerWidth < 768) {\r\n      width = window.innerWidth * 0.96;\r\n      height = width / 1.66;\r\n    }\r\n\r\n    this.setState({\r\n      gameAreaWidth: width,\r\n      gameAreaStyle: {\r\n        height: height + 'px',\r\n        // width: width + 'px',\r\n      }\r\n    });\r\n    const savedProgress = localStorage.getItem('gameProgress');\r\n    const savedGameScore = JSON.parse(localStorage.getItem('gameScore'));\r\n    if (savedProgress && savedGameScore) {\r\n      this.setState({\r\n        gameScore: savedGameScore,\r\n        gameProgress: savedProgress\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let gameContent = null;\r\n    let gameInfo = null;\r\n\r\n    if (this.state.gameStarted) {\r\n      gameContent =\r\n        <Game lvl={this.state.lvl} lvlSize={config.lvlRange[this.state.lvl]} cardsObj={this.state.cardsObj} cardSize={this.cardSize} cardColor={this.cardColor} cardClick={(key, e) => this.cardClickHandler(key, e)} />\r\n    }\r\n\r\n    if (this.state.isWin) {\r\n      gameInfo = <Popup>\r\n        <WinPopup isNewRecord={this.state.isNewRecord} clickCounter={this.state.clickCounter} replayClick={this.replyClickHandler} cancelClick={this.cancelClickHandler} lvl={this.state.lvl} nextLvlClick={(lvl, e) => this.lvlButtonClickHanlder(lvl, e)} />\r\n      </Popup>\r\n    }\r\n\r\n    if (!this.state.gameStarted) {\r\n      gameInfo = <GamePlaceholder />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Menu gameLvl={this.state.lvl} gameStarted={this.state.gameStarted} gameProgress={this.state.gameProgress} lvlButtonClick={(lvl, e) => this.lvlButtonClickHanlder(lvl, e)} gameScore={this.state.gameScore[this.state.lvl]} />\r\n        <div id=\"Game\" className=\"gameArea\" style={this.state.gameAreaStyle}>\r\n          {gameContent}\r\n          {gameInfo}\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}